{"ast":null,"code":"var websocket = null;\nclass WebSocketService {\n  connect(url) {\n    //判断当前浏览器是否支持WebSocket\n    if ('WebSocket' in window) {\n      //连接WebSocket节点\n      websocket = new WebSocket(url);\n    } else {\n      alert('Not support websocket');\n    }\n  }\n\n  /* //连接发生错误的回调方法\r\n  websocket.onerror = function () {\r\n      console.log(\"websocket连接错误\")\r\n  };\r\n    //连接成功建立的回调方法\r\n  websocket.onopen = function () {\r\n      console.log(\"websocket连接成功\")\r\n  }\r\n    //接收到消息的回调方法\r\n  websocket.onmessage = function (event) {\r\n      setMessageInnerHTML(event.data);\r\n  }\r\n    //连接关闭的回调方法\r\n  websocket.onclose = function () {\r\n      console.log(\"websocket连接关闭\")\r\n  }\r\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n  window.onbeforeunload = function () {\r\n      websocket.close();\r\n  } */\n\n  setupEventListeners() {\n    this.websocket.onerror = error => {\n      console.log(\"websocket连接错误\", error);\n    };\n    this.websocket.onopen = () => {\n      console.log(\"websocket连接成功\");\n    };\n    this.websocket.onclose = () => {\n      console.log(\"websocket连接关闭\");\n    };\n\n    // 提供一个公共方法来设置消息处理的回调函数\n    this.setMessageHandler = handler => {\n      this.websocket.onmessage = handler;\n    };\n  }\n}\nexport default WebSocketService;","map":{"version":3,"names":["websocket","WebSocketService","connect","url","window","WebSocket","alert","setupEventListeners","onerror","error","console","log","onopen","onclose","setMessageHandler","handler","onmessage"],"sources":["C:/Users/90858/Documents/Vscode File/Online Course Web/onlinecourseweb/src/websocket/websocketService.js"],"sourcesContent":["var websocket = null;\r\n\r\nclass WebSocketService {\r\n    connect(url) {\r\n        //判断当前浏览器是否支持WebSocket\r\n        if ('WebSocket' in window) {\r\n            //连接WebSocket节点\r\n            websocket = new WebSocket(url);\r\n        } else {\r\n            alert('Not support websocket')\r\n        }\r\n    }\r\n\r\n    /* //连接发生错误的回调方法\r\n    websocket.onerror = function () {\r\n        console.log(\"websocket连接错误\")\r\n    };\r\n\r\n    //连接成功建立的回调方法\r\n    websocket.onopen = function () {\r\n        console.log(\"websocket连接成功\")\r\n    }\r\n\r\n    //接收到消息的回调方法\r\n    websocket.onmessage = function (event) {\r\n        setMessageInnerHTML(event.data);\r\n    }\r\n\r\n    //连接关闭的回调方法\r\n    websocket.onclose = function () {\r\n        console.log(\"websocket连接关闭\")\r\n    }\r\n\r\n    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n    window.onbeforeunload = function () {\r\n        websocket.close();\r\n    } */\r\n\r\n        setupEventListeners() {\r\n            this.websocket.onerror = (error) => {\r\n                console.log(\"websocket连接错误\", error);\r\n            };\r\n    \r\n            this.websocket.onopen = () => {\r\n                console.log(\"websocket连接成功\");\r\n            };\r\n    \r\n            this.websocket.onclose = () => {\r\n                console.log(\"websocket连接关闭\");\r\n            };\r\n    \r\n            // 提供一个公共方法来设置消息处理的回调函数\r\n            this.setMessageHandler = (handler) => {\r\n                this.websocket.onmessage = handler;\r\n            };\r\n        }\r\n    \r\n}\r\nexport default WebSocketService;"],"mappings":"AAAA,IAAIA,SAAS,GAAG,IAAI;AAEpB,MAAMC,gBAAgB,CAAC;EACnBC,OAAOA,CAACC,GAAG,EAAE;IACT;IACA,IAAI,WAAW,IAAIC,MAAM,EAAE;MACvB;MACAJ,SAAS,GAAG,IAAIK,SAAS,CAACF,GAAG,CAAC;IAClC,CAAC,MAAM;MACHG,KAAK,CAAC,uBAAuB,CAAC;IAClC;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAMQC,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACP,SAAS,CAACQ,OAAO,GAAIC,KAAK,IAAK;MAChCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK,CAAC;IACvC,CAAC;IAED,IAAI,CAACT,SAAS,CAACY,MAAM,GAAG,MAAM;MAC1BF,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,IAAI,CAACX,SAAS,CAACa,OAAO,GAAG,MAAM;MAC3BH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAChC,CAAC;;IAED;IACA,IAAI,CAACG,iBAAiB,GAAIC,OAAO,IAAK;MAClC,IAAI,CAACf,SAAS,CAACgB,SAAS,GAAGD,OAAO;IACtC,CAAC;EACL;AAER;AACA,eAAed,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}